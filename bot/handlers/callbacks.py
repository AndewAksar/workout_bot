# bot/handlers/callbacks.py
import sqlite3
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from bot.keyboards.main_menu import get_main_menu
from bot.keyboards.settings_menu import (get_settings_menu, get_personal_data_menu,
                                         get_training_settings_menu, get_ai_assistant_menu)
from bot.utils.logger import setup_logging


logger = setup_logging()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_NAME, SET_AGE, SET_WEIGHT, SET_HEIGHT, SET_TRAINING_TYPE = range(5)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    c = conn.cursor()

    if query.data == "start_training":
        await query.message.edit_text(
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞! –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
            reply_markup=get_main_menu()
        )
    elif query.data == "my_trainings":
        await query.message.edit_text(
            "üóÇÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).",
            reply_markup=get_main_menu()
        )
    elif query.data == "my_ai_assistant":
        await query.message.edit_text(
            "ü§ñ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.",
            reply_markup=get_ai_assistant_menu()
        )
    elif query.data == "settings":
        await query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=get_settings_menu()
        )
    elif query.data == "personal_data":
        await query.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=get_personal_data_menu()
        )
    elif query.data == "training_settings":
        await query.message.edit_text(
            "üèãÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
            reply_markup=get_training_settings_menu()
        )
    elif query.data == "show_profile":
        c.execute("SELECT name, age, weight, height, training_type, username FROM UserSettings WHERE user_id = ?",
                  (user_id,))
        profile = c.fetchone()
        if profile:
            greeting = (
                f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                f"üë§ –ò–º—è: {profile[0] if profile[0] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile[1] if profile[1] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚öñÔ∏è –í–µ—Å: {profile[2] if profile[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n"
                f"üìè –†–æ—Å—Ç: {profile[3] if profile[3] else '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
                f"üí™ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {profile[4] if profile[4] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìß Telegram: @{profile[5] if profile[5] else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
        else:
            greeting = "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
        await query.message.edit_text(
            greeting,
            parse_mode="HTML",
            reply_markup=get_settings_menu()
        )
    elif query.data == "main_menu":
        await query.message.edit_text(
            "üí™ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )
    elif query.data == "set_name":
        await query.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=None
        )
        return SET_NAME
    elif query.data == "set_age":
        await query.message.edit_text(
            "üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):",
            reply_markup=None
        )
        return SET_AGE
    elif query.data == "set_weight":
        await query.message.edit_text(
            "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):",
            reply_markup=None
        )
        return SET_WEIGHT
    elif query.data == "set_height":
        await query.message.edit_text(
            "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):",
            reply_markup=None
        )
        return SET_HEIGHT
    elif query.data == "set_training_type":
        await query.message.edit_text(
            "üí™ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–ª–æ–≤—ã–µ, –∫–∞—Ä–¥–∏–æ, –π–æ–≥–∞):",
            reply_markup=None
        )
        return SET_TRAINING_TYPE

    conn.close()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    name = update.message.text.strip()
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("UPDATE UserSettings SET name = ? WHERE user_id = ?", (name, user_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(
        f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}",
        reply_markup=get_personal_data_menu()
    )
    return ConversationHandler.END

async def set_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        age = int(update.message.text.strip())
        if age < 0 or age > 150:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE UserSettings SET age = ? WHERE user_id = ?", (age, user_id))
        conn.commit()
        conn.close()
        await update.message.reply_text(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {age}",
            reply_markup=get_personal_data_menu()
        )
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.",
            reply_markup=get_personal_data_menu()
        )
    return ConversationHandler.END

async def set_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        weight = float(update.message.text.strip())
        if weight < 0 or weight > 500:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE UserSettings SET weight = ? WHERE user_id = ?", (weight, user_id))
        conn.commit()
        conn.close()
        await update.message.reply_text(
            f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥",
            reply_markup=get_personal_data_menu()
        )
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).",
            reply_markup=get_personal_data_menu()
        )
    return ConversationHandler.END

async def set_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        height = float(update.message.text.strip())
        if height < 0 or height > 300:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç")
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE UserSettings SET height = ? WHERE user_id = ?", (height, user_id))
        conn.commit()
        conn.close()
        await update.message.reply_text(
            f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {height} —Å–º",
            reply_markup=get_personal_data_menu()
        )
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).",
            reply_markup=get_personal_data_menu()
        )
    return ConversationHandler.END

async def set_training_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    training_type = update.message.text.strip()
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("UPDATE UserSettings SET training_type = ? WHERE user_id = ?", (training_type, user_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(
        f"‚úÖ –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {training_type}",
        reply_markup=get_training_settings_menu()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîô –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_settings_menu()
    )
    return ConversationHandler.END