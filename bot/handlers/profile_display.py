# bot/handlers/profile_display.py
"""
–ú–æ–¥—É–ª—å: profile_display.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- sqlite3: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
- telegram, telegram.ext: –†–∞–±–æ—Ç–∞ —Å Telegram API.
- bot.api.gym_stat_client: –ó–∞–ø—Ä–æ—Å—ã –∫ Gym-Stat API.
- bot.utils.api_session: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–æ–º.
- bot.utils.db_utils: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- bot.keyboards.settings_menu: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import sqlite3
from telegram import Update
from telegram.ext import ContextTypes

from bot.api.gym_stat_client import get_profile as api_get_profile
from bot.keyboards.settings_menu import get_settings_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.message_deletion import schedule_message_deletion
from bot.utils.logger import setup_logging
from bot.config.settings import DB_PATH
from telegram.error import BadRequest


logger = setup_logging()

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å", user_id)

    mode = get_user_mode(user_id)

    try:
        if mode == "api":
            token = await get_valid_access_token(user_id)
            if not token:
                await query.message.edit_text(
                    "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
                    reply_markup=get_settings_menu(),
                )
                return
            resp = await api_get_profile(token)
            if resp.status_code != 200:
                logger.warning(
                    "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω: %s %s", resp.status_code, resp.text
                )
                await query.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_settings_menu(),
                )
                return
            data = resp.json()
            greeting = (
                f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ Gym-Stat:</b>\n"
                f"üë§ –ò–º—è: <code>{data.get('name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
                f"üìß Email: <code>{data.get('email')}</code>\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: <code>{data.get('age') or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
                f"–í–µ—Å: <code>{data.get('weight') or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> –∫–≥\n"
                f"–†–æ—Å—Ç: <code>{data.get('height') or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> —Å–º\n"
                f"–¶–µ–ª–∏: <code>{data.get('goals') or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</code>"
            )
        else:
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute(
                "SELECT name, age, weight, height, gender, username FROM UserSettings WHERE user_id = ?",
                (user_id,),
            )
            profile = c.fetchone()
            if profile:
                greeting = (
                    f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                    f"üë§ –ò–º—è: <code>{profile[0] if profile[0] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: <code>{profile[1] if profile[1] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
                    f"–í–µ—Å: <code>{profile[2] if profile[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> –∫–≥\n"
                    f"–†–æ—Å—Ç: <code>{profile[3] if profile[3] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> —Å–º\n"
                    f"–ü–æ–ª: <code>{profile[4] if profile[4] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n"
                    f"üìß Telegram: <code>@{profile[5] if profile[5] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>"
                )
            else:
                greeting = "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
    except sqlite3.Error as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, str(e))
        greeting = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
    finally:
        if 'conn' in locals():
            conn.close()
    try:
        await query.message.edit_text(
            greeting,
            parse_mode="HTML",
            reply_markup=get_settings_menu(),
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        sent_message = await query.message.reply_text(
            greeting,
            parse_mode="HTML",
            reply_markup=get_settings_menu(),
        )
        await schedule_message_deletion(context, [sent_message.message_id], chat_id, delay=5)