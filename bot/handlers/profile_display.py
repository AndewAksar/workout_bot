# bot/handlers/profile_display.py
"""
–ú–æ–¥—É–ª—å: profile_display.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- aiosqlite: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
- telegram, telegram.ext: –†–∞–±–æ—Ç–∞ —Å Telegram API.
- bot.api.gym_stat_client: –ó–∞–ø—Ä–æ—Å—ã –∫ Gym-Stat API.
- bot.utils.api_session: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–æ–º.
- bot.utils.db_utils: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- bot.keyboards.settings_menu: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import aiosqlite
from telegram import Update
from telegram.ext import ContextTypes
import httpx
from datetime import date, datetime
import html

from bot.api.gym_stat_client import (
    get_profile as api_get_profile,
    get_weight_data as api_get_weight_data,
)
from bot.keyboards.settings_menu import get_settings_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.message_deletion import schedule_message_deletion
from bot.utils.logger import setup_logging
from bot.utils.formatters import format_gender
from bot.config.settings import DB_PATH
from telegram.error import (
    BadRequest,
    TelegramError
)


logger = setup_logging()

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å", user_id)

    try:
        mode = await get_user_mode(user_id)
        if mode == "api":
            token = await get_valid_access_token(user_id)
            if not token:
                await query.message.edit_text(
                    "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
                    reply_markup=get_settings_menu(),
                )
                return
            try:
                resp = await api_get_profile(token)
            except httpx.HTTPError as e:
                logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, str(e))
                await query.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_settings_menu(),
                )
                return
            if resp.status_code != 200:
                logger.warning(
                    "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω: %s %s", resp.status_code, resp.text
                )
                await query.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_settings_menu(),
                )
                return
            try:
                data = resp.json()
            except ValueError as e:
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, str(e))
                await query.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_settings_menu(),
                )
                return
            birth_date_raw = data.get("birthDate")
            birth_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            if birth_date_raw:
                try:
                    birth_dt = date.fromisoformat(birth_date_raw.split("T")[0])
                    today = date.today()
                    age = today.year - birth_dt.year - (
                            (today.month, today.day) < (birth_dt.month, birth_dt.day)
                    )
                    birth_date = f"{birth_dt.strftime('%d.%m.%Y')}({age})"
                except ValueError:
                    birth_date = birth_date_raw

            def esc(value: str | None, default: str = "–ù–µ —É–∫–∞–∑–∞–Ω") -> str:
                if value is None:
                    return default
                return html.escape(str(value))

            # goals = data.get("goals")
            # if isinstance(goals, list):
            #     goals = ", ".join(str(g) for g in goals)
            # goals = esc(goals, "–ù–µ —É–∫–∞–∑–∞–Ω—ã")

            last_weight_line = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ: <code>–ù–µ —É–∫–∞–∑–∞–Ω–æ</code>\n"
            try:
                weight_resp = await api_get_weight_data(token)
                if weight_resp.status_code == 200:
                    weight_payload = weight_resp.json()
                    items = []
                    if isinstance(weight_payload, list):
                        items = weight_payload
                    elif isinstance(weight_payload, dict):
                        if isinstance(weight_payload.get("data"), list):
                            items = weight_payload["data"]
                        elif isinstance(weight_payload.get("results"), list):
                            items = weight_payload["results"]
                    if items:
                        items.sort(key=lambda x: x.get("date", ""), reverse=True)
                        latest = items[0]
                        w = latest.get("weight")
                        d_raw = latest.get("date")
                        if w is not None and d_raw:
                            try:
                                d_fmt = datetime.fromisoformat(d_raw.split("T")[0]).strftime("%d.%m.%Y")
                            except ValueError:
                                d_fmt = d_raw
                            last_weight_line = (
                                f"–í–µ—Å: <code>{esc(w)}</code> –∫–≥ –æ—Ç <code>{esc(d_fmt)}</code>\n"
                            )
            except Exception as e:
                logger.error(
                    "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                    user_id,
                    str(e),
                )
            greeting = (
                f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ Gym-Stat:</b>\n"
                f"üë§ –ò–º—è: <code>{esc(data.get('name'))}</code>\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{html.escape(birth_date)}</code>\n"
                f"{last_weight_line}"
                f"–†–æ—Å—Ç: <code>{esc(data.get('height'))}</code> —Å–º\n"
                f"–ü–æ–ª: <code>{format_gender(data.get('gender'))}</code>\n\n"
                f"üìß Email: <code>{esc(data.get('email'))}</code>\n"
                # f"üéØ –¶–µ–ª–∏: <code>{goals}</code>"
            )
        else:
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute(
                    "SELECT name, age, weight, height, gender, username FROM UserSettings WHERE user_id = ?",
                    (user_id,),
                ) as cursor:
                    profile = await cursor.fetchone()
            if profile:
                greeting = (
                    f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                    f"üë§ –ò–º—è: <code>{profile[0] if profile[0] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
                    f"–í–æ–∑—Ä–∞—Å—Ç: <code>{profile[1] if profile[1] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
                    f"–í–µ—Å: <code>{profile[2] if profile[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> –∫–≥\n"
                    f"–†–æ—Å—Ç: <code>{profile[3] if profile[3] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code> —Å–º\n"
                    f"–ü–æ–ª: <code>{profile[4] if profile[4] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n"
                    f"üìß Telegram: <code>@{profile[5] if profile[5] else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>"
                )
            else:
                greeting = "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
    except aiosqlite.Error as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, str(e))
        greeting = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
    except Exception as e:
        logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
        greeting = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    try:
        await query.message.edit_text(
            greeting,
            parse_mode="HTML",
            reply_markup=get_settings_menu(),
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        sent_message = await query.message.reply_text(
            greeting,
            parse_mode="HTML",
            reply_markup=get_settings_menu(),
        )
        schedule_message_deletion(
            context, [sent_message.message_id], chat_id, delay=5
        )
    except TelegramError as e:
        logger.error(
            "–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, str(e)
        )
        sent_message = await query.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_menu(),
        )
        schedule_message_deletion(
            context, [sent_message.message_id], chat_id, delay=5
        )