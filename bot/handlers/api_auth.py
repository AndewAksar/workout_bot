# bot/handlers/api_auth.py
"""
–ú–æ–¥—É–ª—å: api_auth.py
–û–ø–∏—Å–∞–Ω–∏–µ: –î–∏–∞–ª–æ–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API Gym-Stat.ru.
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- httpx: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
- telegram –∏ telegram.ext: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram.
- bot.api.gym_stat_client: –ö–ª–∏–µ–Ω—Ç Gym-Stat.
- bot.utils.encryption: –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
- bot.utils.db_utils: –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.
"""

import re
import asyncio
from datetime import (
    date,
    datetime
)
import html
from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)

from bot.api.gym_stat_client import (
    register_user,
    login_user,
    get_profile,
    get_weight_data
)
from bot.utils.encryption import encrypt_token
from bot.utils.db_utils import save_api_tokens
from bot.utils.logger import setup_logging
from bot.keyboards.main_menu import get_main_menu
from bot.utils.formatters import format_gender
from bot.utils.message_deletion import schedule_message_deletion


logger = setup_logging()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–≥–∏–Ω–∞, –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—è
REG_LOGIN, REG_EMAIL, REG_PASSWORD, REG_CONFIRM = range(4)
LOGIN_LOGIN, LOGIN_PASSWORD = range(4, 6)


def _valid_email(email: str) -> bool:
    return re.match(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", email) is not None


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ, —Ç–∞–∫ –∏ –ø–æ –∫–Ω–æ–ø–∫–µ)."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message
        schedule_message_deletion(
            context,
            [update.message.message_id],
            chat_id=update.message.chat_id,
            delay=5,
        )
    # –ü–µ—Ä–≤—ã–º —à–∞–≥–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω, —Ç.–∫. –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ
    sent_message = await message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=30,
    )
    return REG_LOGIN


async def reg_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    login = update.message.text.strip()
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    if not login:
        sent_message = await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=30,
        )
        return REG_LOGIN
    context.user_data["reg_login"] = login  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω
    sent_message = await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email:")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=5,
    )
    return REG_EMAIL


async def reg_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text.strip()
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    if not _valid_email(email):
        sent_message = await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
        return REG_EMAIL
    context.user_data["reg_email"] = email
    sent_message = await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤):")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=5,
    )
    return REG_PASSWORD


async def reg_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    password = update.message.text.strip()
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    if len(password) < 8:
        sent_message = await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
        return REG_PASSWORD
    context.user_data["reg_password"] = password
    sent_message = await update.message.reply_text("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=5,
    )
    return REG_CONFIRM


async def reg_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip() != context.user_data.get("reg_password"):
        schedule_message_deletion(
            context,
            [update.message.message_id],
            chat_id=update.message.chat_id,
            delay=5,
        )
        sent_message = await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=10,
        )
        return REG_PASSWORD
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    payload = {
        "login": context.user_data["reg_login"],
        "email": context.user_data["reg_email"],
        "password": context.user_data["reg_password"],
    }
    resp = await register_user(payload)
    if resp.status_code == 201:
        sent_message = await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
    elif resp.status_code == 409:
        sent_message = await update.message.reply_text("‚ö†Ô∏è Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        error_message = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            error_data = resp.json()
            if isinstance(error_data.get("message"), list) and error_data["message"]:
                error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {html.escape(error_data['message'][0])}"
            elif isinstance(error_data.get("message"), str):
                error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {html.escape(error_data['message'])}"
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if resp.status_code == 400:
                sent_message = await update.message.reply_text(
                    error_message + " –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:"
                )
                schedule_message_deletion(
                    context,
                    [sent_message.message_id],
                    chat_id=sent_message.chat_id,
                    delay=10,
                )
                return REG_PASSWORD
        except ValueError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç API: %s %s", resp.status_code, resp.text)
        logger.warning("Registration failed: %s %s", resp.status_code, resp.text)
        sent_message = await update.message.reply_text(error_message)
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
    return ConversationHandler.END


async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –∫–æ–º–∞–Ω–¥—É)."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message
        schedule_message_deletion(
            context,
            [update.message.message_id],
            chat_id=update.message.chat_id,
            delay=5,
        )
    context.user_data["login_attempts"] = 0
    sent_message = await message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=10,
    )
    return LOGIN_LOGIN


async def login_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    login = update.message.text.strip()
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    if not login:
        sent_message = await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
        return LOGIN_LOGIN
    context.user_data["login_login"] = login

    sent_message = await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=10,
    )
    return LOGIN_PASSWORD


async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["login_attempts"] += 1
    password = update.message.text.strip()
    login = context.user_data["login_login"]
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    resp = await login_user(login, password)
    if resp.status_code == 200:
        data = resp.json()
        access = data.get("access_token")
        refresh = data.get("refresh_token")
        if not access:
            logger.error("–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª access_token: %s", data)
            sent_message = await update.message.reply_text(
                "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª access_token"
            )
            schedule_message_deletion(
                context,
                [sent_message.message_id],
                chat_id=sent_message.chat_id,
                delay=5,
            )
            return ConversationHandler.END
        if not refresh:
            logger.warning("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª refresh_token: %s", data)
        coroutines = [
            save_api_tokens(
                update.message.from_user.id,
                encrypt_token(access),
                encrypt_token(refresh) if refresh else None,
                data.get("expires_in", 3600),
            ),
            get_profile(access),
            get_weight_data(access),
        ]
        save_result, profile_result, weight_result = await asyncio.gather(
            *coroutines,
            return_exceptions=True,
        )

        if isinstance(save_result, Exception):
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                update.message.from_user.id,
                str(save_result),
            )

        profile_text = "<b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>"
        profile_response = None
        if isinstance(profile_result, Exception):
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                update.message.from_user.id,
                str(profile_result),
            )
        else:
            profile_response = profile_result

        weight_response = None
        if isinstance(weight_result, Exception):
            logger.error(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                update.message.from_user.id,
                str(weight_result),
            )
        else:
            weight_response = weight_result

        if profile_response and profile_response.status_code == 200:
            try:
                prof = profile_response.json()

                birth_raw = prof.get("birthDate")
                birth_fmt = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                if birth_raw:
                    try:
                        bd = date.fromisoformat(birth_raw.split("T")[0])
                        today = date.today()
                        age = today.year - bd.year - (
                            (today.month, today.day) < (bd.month, bd.day)
                        )
                        birth_fmt = f"{bd.strftime('%d.%m.%Y')}({age})"
                    except ValueError:
                        birth_fmt = birth_raw

                def esc(val, default="–ù–µ —É–∫–∞–∑–∞–Ω"):
                    return html.escape(str(val)) if val is not None else default

                weight_line = "–í–µ—Å: <code>–ù–µ —É–∫–∞–∑–∞–Ω</code>\n"
                if weight_response and weight_response.status_code == 200:
                    try:
                        payload = weight_response.json()
                        items = []
                        if isinstance(payload, list):
                            items = payload
                        elif isinstance(payload, dict):
                            if isinstance(payload.get("data"), list):
                                items = payload["data"]
                            elif isinstance(payload.get("results"), list):
                                items = payload["results"]
                        if items:
                            items.sort(key=lambda x: x.get("date", ""), reverse=True)
                            latest = items[0]
                            w = latest.get("weight")
                            d_raw = latest.get("date")
                            if w is not None and d_raw:
                                try:
                                    d_fmt = datetime.fromisoformat(
                                        d_raw.split("T")[0]
                                    ).strftime("%d.%m.%Y")
                                except ValueError:
                                    d_fmt = d_raw
                                weight_line = (
                                    f"–í–µ—Å: <code>{esc(w)}</code> –∫–≥ –æ—Ç <code>{esc(d_fmt)}</code>\n"
                                )
                    except Exception as e:
                        logger.error(
                            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                            update.message.from_user.id,
                            str(e),
                        )

                profile_text = (
                    f"<b>–ü—Ä–∏–≤–µ—Ç, {esc(prof.get('name')) or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã</b>\n"
                    f"üë§ –ò–º—è: <code>{esc(prof.get('name'))}</code>\n"
                    f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <code>{html.escape(birth_fmt)}</code>\n"
                    f"{weight_line}"
                    f"–†–æ—Å—Ç: <code>{esc(prof.get('height'))}</code> —Å–º\n"
                    f"–ü–æ–ª: <code>{format_gender(prof.get('gender'))}</code>"
                )
            except Exception as e:
                logger.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                    update.message.from_user.id,
                    str(e),
                )

        await update.message.reply_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=get_main_menu(),
        )

        return ConversationHandler.END
    if resp.status_code == 401 and context.user_data["login_attempts"] < 3:
        sent_message = await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
        return LOGIN_PASSWORD
    if resp.status_code == 429:
        sent_message = await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
    else:
        sent_message = await update.message.reply_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        schedule_message_deletion(
            context,
            [sent_message.message_id],
            chat_id=sent_message.chat_id,
            delay=5,
        )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    schedule_message_deletion(
        context,
        [update.message.message_id],
        chat_id=update.message.chat_id,
        delay=5,
    )
    sent_message = await update.message.reply_text("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    schedule_message_deletion(
        context,
        [sent_message.message_id],
        chat_id=sent_message.chat_id,
        delay=5,
    )
    return ConversationHandler.END