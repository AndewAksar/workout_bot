# bot/handlers/api_auth.py
"""
–ú–æ–¥—É–ª—å: api_auth.py
–û–ø–∏—Å–∞–Ω–∏–µ: –î–∏–∞–ª–æ–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API Gym-Stat.ru.
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- httpx: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
- telegram –∏ telegram.ext: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram.
- bot.api.gym_stat_client: –ö–ª–∏–µ–Ω—Ç Gym-Stat.
- bot.utils.encryption: –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.
- bot.utils.db_utils: –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.
"""

import re
from typing import Dict

from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)

from bot.api.gym_stat_client import register_user, login_user
from bot.utils.encryption import encrypt_token
from bot.utils.db_utils import save_api_tokens
from bot.utils.logger import setup_logging

logger = setup_logging()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–≥–∏–Ω–∞, –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—è
REG_LOGIN, REG_EMAIL, REG_PASSWORD, REG_CONFIRM = range(4)
LOGIN_LOGIN, LOGIN_PASSWORD = range(4, 6)

def _valid_email(email: str) -> bool:
    return re.match(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", email) is not None


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–µ—Ä–≤—ã–º —à–∞–≥–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω, —Ç.–∫. –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return REG_LOGIN


async def reg_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    login = update.message.text.strip()
    if not login:
        await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_LOGIN
    context.user_data["reg_login"] = login  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω
    await update.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email:")
    return REG_EMAIL


async def reg_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text.strip()
    if not _valid_email(email):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_EMAIL
    context.user_data["reg_email"] = email
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤):")
    return REG_PASSWORD


async def reg_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    password = update.message.text.strip()
    if len(password) < 8:
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return REG_PASSWORD
    context.user_data["reg_password"] = password
    await update.message.reply_text("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return REG_CONFIRM


async def reg_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip() != context.user_data.get("reg_password"):
        await update.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:")
        return REG_PASSWORD
    payload = {
        "login": context.user_data["reg_login"],
        "email": context.user_data["reg_email"],
        "password": context.user_data["reg_password"],
    }
    resp = await register_user(payload)
    if resp.status_code == 201:
        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
    elif resp.status_code == 409:
        await update.message.reply_text("‚ö†Ô∏è Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
    else:
        logger.warning("Registration failed: %s %s", resp.status_code, resp.text)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    return ConversationHandler.END


async def start_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["login_attempts"] = 0
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return LOGIN_LOGIN


async def login_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    login = update.message.text.strip()
    if not login:
        await update.message.reply_text("‚ö†Ô∏è –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return LOGIN_LOGIN
    context.user_data["login_login"] = login
    await update.message.reply_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD


async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["login_attempts"] += 1
    password = update.message.text.strip()
    login = context.user_data["login_login"]
    resp = await login_user(login, password)
    if resp.status_code == 200:
        data = resp.json()
        access = data.get("access_token")
        refresh = data.get("refresh_token")
        if not access:
            logger.error("–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª access_token: %s", data)
            await update.message.reply_text(
                "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª access_token"
            )
            return ConversationHandler.END
        if not refresh:
            logger.warning("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª refresh_token: %s", data)
        save_api_tokens(
            update.message.from_user.id,
            encrypt_token(access),
            encrypt_token(refresh) if refresh else None,
            data.get("expires_in", 3600),
        )
        await update.message.reply_text("‚úÖ –í—ã –≤–æ—à–ª–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –∏–ª–∏ /trainings")
        return ConversationHandler.END
    if resp.status_code == 401 and context.user_data["login_attempts"] < 3:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return LOGIN_PASSWORD
    if resp.status_code == 429:
        await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    else:
        await update.message.reply_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END