# bot/handlers/weight_data.py
"""
–ú–æ–¥—É–ª—å: weight_data.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- telegram, telegram.ext: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- bot.api.gym_stat_client: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Gym-Stat API.
- bot.utils.api_session: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- bot.utils.db_utils: –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- bot.keyboards.settings_menu: –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞).
- bot.utils.logger: –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫.
"""

from __future__ import annotations

import html
import math
import re
from datetime import datetime, timezone
from typing import Any, Iterable, List

import httpx
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest, TelegramError
from telegram.ext import ContextTypes, ConversationHandler

from bot.api.gym_stat_client import get_weight_data as api_get_weight_data
from bot.keyboards.settings_menu import get_settings_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.logger import setup_logging


logger = setup_logging()

PAGE_SIZE = 5

# –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–∞—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
MONTH_NAMES_RU = {
    1: ("–Ø–Ω–≤–∞—Ä—å", "—è–Ω–≤–∞—Ä—è"),
    2: ("–§–µ–≤—Ä–∞–ª—å", "—Ñ–µ–≤—Ä–∞–ª—è"),
    3: ("–ú–∞—Ä—Ç", "–º–∞—Ä—Ç–∞"),
    4: ("–ê–ø—Ä–µ–ª—å", "–∞–ø—Ä–µ–ª—è"),
    5: ("–ú–∞–π", "–º–∞—è"),
    6: ("–ò—é–Ω—å", "–∏—é–Ω—è"),
    7: ("–ò—é–ª—å", "–∏—é–ª—è"),
    8: ("–ê–≤–≥—É—Å—Ç", "–∞–≤–≥—É—Å—Ç–∞"),
    9: ("–°–µ–Ω—Ç—è–±—Ä—å", "—Å–µ–Ω—Ç—è–±—Ä—è"),
    10: ("–û–∫—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—è"),
    11: ("–ù–æ—è–±—Ä—å", "–Ω–æ—è–±—Ä—è"),
    12: ("–î–µ–∫–∞–±—Ä—å", "–¥–µ–∫–∞–±—Ä—è"),
}


def _extract_page(callback_data: str | None) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data."""

    if not callback_data:
        return 1
    match = re.search(r"weight_data_page_(\d+)", callback_data)
    if match:
        try:
            page = int(match.group(1))
            return max(page, 1)
        except ValueError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data: %s", callback_data)
    return 1


def _normalize_items(payload: Any) -> List[dict]:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç API –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π."""

    if isinstance(payload, list):
        return [item for item in payload if isinstance(item, dict)]
    if isinstance(payload, dict):
        for key in ("data", "results", "items"):
            value = payload.get(key)
            if isinstance(value, list):
                return [item for item in value if isinstance(item, dict)]
    return []


def _parse_iso_datetime(value: Any) -> datetime | None:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É ISO-—Ñ–æ—Ä–º–∞—Ç–∞ –≤ datetime."""

    if not value:
        return None
    if isinstance(value, datetime):
        return value
    if isinstance(value, str):
        normalized = value.replace("Z", "+00:00")
        try:
            dt = datetime.fromisoformat(normalized)
            if dt.tzinfo:
                dt = dt.astimezone(timezone.utc).replace(tzinfo=None)
            return dt
        except ValueError:
            pass
        try:
            return datetime.strptime(normalized, "%Y-%m-%d")
        except ValueError:
            return None
    return None


def _format_weight(value: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""

    if value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"
    if isinstance(value, (int, float)):
        formatted = f"{value:.2f}".rstrip("0").rstrip(".")
        return formatted
    return str(value)


def _format_month_header(dt: datetime | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞."""

    if not dt:
        return "–ë–µ–∑ –¥–∞—Ç—ã"
    month_name, _ = MONTH_NAMES_RU.get(dt.month, (dt.strftime("%B"), dt.strftime("%B")))
    return f"{month_name} {dt.year}"


def _format_entry(entry: dict, dt: datetime | None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è."""

    weight_value = html.escape(_format_weight(entry.get("weight")))

    if dt:
        _, month_genitive = MONTH_NAMES_RU.get(dt.month, (dt.strftime("%B"), dt.strftime("%B")))
        day_part = f"{dt.day} {month_genitive}"
        time_part = ""
        if dt.hour or dt.minute:
            time_part = f", {dt.strftime('%H:%M')}"
        date_part = f"{day_part}{time_part}"
    else:
        date_part = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    note = entry.get("note") or entry.get("comment")
    note_part = ""
    if note:
        note_part = f"\nüìù {html.escape(str(note))}"

    return f"‚Ä¢ {date_part} ‚Äî <code>{weight_value}</code> –∫–≥ ‚öñÔ∏è{note_part}"


def _build_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""

    keyboard: list[list[InlineKeyboardButton]] = []

    nav_row: list[InlineKeyboardButton] = []
    if page > 1:
        nav_row.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"weight_data_page_{page - 1}")
        )
    if page < total_pages:
        nav_row.append(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"weight_data_page_{page + 1}")
        )
    if nav_row:
        keyboard.append(nav_row)

    keyboard.append([
        InlineKeyboardButton("‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
    ])

    return InlineKeyboardMarkup(keyboard)


def _format_history(items: Iterable[dict], page: int, total_pages: int, total_items: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π."""

    lines: list[str] = ["‚öñÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π</b>"]

    if total_items:
        lines.append("")
        lines.append(f"üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <code>{total_items}</code>")
        lines.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <code>{page}</code> / <code>{total_pages}</code>")
        lines.append("")

        current_month: str | None = None
        for entry in items:
            dt = _parse_iso_datetime(
                entry.get("date")
                or entry.get("createdAt")
                or entry.get("created_at")
            )
            month_header = _format_month_header(dt)
            if month_header != current_month:
                if current_month is not None:
                    lines.append("")
                lines.append(f"üìÖ <b>{html.escape(month_header)}</b>")
                current_month = month_header
            lines.append(_format_entry(entry, dt))
        lines.append("")
        lines.append("‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º!")
        lines.append(
            "üß≠ –ö–Ω–æ–ø–∫–∏ ¬´‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è¬ª –∏ ¬´–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è¬ª –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—é—Ç –∏—Å—Ç–æ—Ä–∏—é."
            " –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–º–æ–∂–µ—Ç ¬´‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º¬ª."
        )
    else:
        lines.append("")
        lines.append("üì≠ –ó–∞–ø–∏—Å–µ–π –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.")
        lines.append(
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ¬ª ‚Üí ¬´–í–µ—Å¬ª."
            " –ó–∞–ø–∏—Å–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ Gym-Stat –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ"
            " —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. üí™"
        )
        lines.append(
            "‚ÑπÔ∏è –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑"
            " ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )

    return "\n".join(lines)


async def show_weight_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    query = update.callback_query
    if not query:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç callback_query –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è")
        return ConversationHandler.END

    await query.answer()

    user_id = query.from_user.id
    page = _extract_page(query.data)

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %s)", user_id, page)

    try:
        mode = await get_user_mode(user_id)
    except Exception as exc:  # noqa: BLE001
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, exc)
        try:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_settings_menu(),
            )
        except TelegramError as telegram_error:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, telegram_error)
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    if mode != "api":
        try:
            await query.message.edit_text(
                "‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Gym-Stat."
                " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.",
                reply_markup=get_settings_menu(),
            )
        except TelegramError as telegram_error:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, telegram_error)
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    token = await get_valid_access_token(user_id)
    if not token:
        try:
            await query.message.edit_text(
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                reply_markup=get_settings_menu(),
            )
        except TelegramError as telegram_error:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ –≤—Ö–æ–¥–µ: %s", user_id, telegram_error)
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    try:
        response = await api_get_weight_data(token, params={"orderBy": "date"})
    except httpx.HTTPError as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, exc)
        try:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_settings_menu(),
            )
        except TelegramError as telegram_error:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, telegram_error)
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    if response.status_code != 200:
        logger.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
            user_id,
            response.status_code,
            response.text,
        )
        try:
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_settings_menu(),
            )
        except TelegramError as telegram_error:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, telegram_error)
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    try:
        payload = response.json()
    except ValueError:
        payload = []

    items = _normalize_items(payload)
    items.sort(
        key=lambda item: _parse_iso_datetime(
            item.get("date") or item.get("createdAt") or item.get("created_at")
        )
        or datetime.min,
        reverse=True,
    )

    total_items = len(items)
    total_pages = max(1, math.ceil(total_items / PAGE_SIZE)) if total_items else 1
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    page_items = items[start_index:end_index]

    text = _format_history(page_items, page, total_pages, total_items)
    keyboard = _build_keyboard(page, total_pages)

    try:
        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    except BadRequest as exc:
        if "Message is not modified" in str(exc):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
        else:
            logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, exc)
    except TelegramError as exc:
        logger.error("–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, exc)
        try:
            await query.message.reply_text(
                text,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        except TelegramError as reply_exc:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, reply_exc)

    context.user_data['conversation_active'] = False
    return ConversationHandler.END