# bot/handlers/set_weight.py
"""
–ú–æ–¥—É–ª—å: set_weight.py
–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö ConversationHandler
–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞ –∏ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- aiosqlite: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
- telegram: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- telegram.ext: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ ConversationHandler.
- bot.api.gym_stat_client: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä Gym-Stat.
- bot.keyboards.personal_data_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
- bot.utils.api_session: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ access-—Ç–æ–∫–µ–Ω–∞ Gym-Stat.
- bot.utils.db_utils: –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- bot.utils.message_deletion: –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import asyncio
import os
import aiosqlite
import httpx
from datetime import datetime, timezone
from telegram import Message, Update
from telegram.ext import ContextTypes, ConversationHandler

from bot.api.gym_stat_client import create_weight_data
from bot.keyboards.personal_data_menu import get_personal_data_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.logger import setup_logging
from bot.utils.message_deletion import schedule_message_deletion
from bot.config.settings import DB_PATH


logger = setup_logging()


async def _ensure_user_row(db: aiosqlite.Connection, user_id: int) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ UserSettings –ø—Ä–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    async with db.execute(
        "SELECT user_id FROM UserSettings WHERE user_id = ?",
        (user_id,),
    ) as cursor:
        exists = await cursor.fetchone()
    if not exists:
        await db.execute(
            "INSERT INTO UserSettings (user_id) VALUES (?)",
            (user_id,),
        )
        await db.commit()


async def _init_table_if_required(db: aiosqlite.Connection) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã UserSettings –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    async with db.execute(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='UserSettings'",
    ) as cursor:
        if await cursor.fetchone():
            return
    logger.error("–¢–∞–±–ª–∏—Ü–∞ UserSettings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º init_db")
    from bot.database.db_init import init_db

    await asyncio.to_thread(init_db)


async def _send_error(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    user_message_id: int,
    text: str,
    delay: int = 10,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ."""
    error_message = await message.reply_text(
        text,
        reply_markup=get_personal_data_menu(),
    )
    schedule_message_deletion(
        context,
        [user_message_id, error_message.message_id],
        chat_id,
        delay=delay,
    )


async def set_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–µ—Å–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏ API-—Ä–µ–∂–∏–º–∞—Ö."""
    message = update.message
    if message is None:
        return ConversationHandler.END

    user_id = message.from_user.id
    chat_id = message.chat_id
    user_message_id = message.message_id
    raw_text = (message.text or "").strip()

    try:
        weight = float(raw_text.replace(",", "."))
    except ValueError:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: %s", user_id, raw_text)
        await _send_error(
            message,
            context,
            chat_id,
            user_message_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5).",
        )
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END
    if weight < 0 or weight > 500:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s", user_id, weight)
        await _send_error(
            message,
            context,
            chat_id,
            user_message_id,
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤–µ—Å–∞ (–¥–æ–ø—É—Å—Ç–∏–º–æ 0 - 500 –∫–≥).",
        )
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END
    mode = await get_user_mode(user_id)
    if mode == "api":
        token = await get_valid_access_token(user_id)
        if not token:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
            await _send_error(
                message,
                context,
                chat_id,
                user_message_id,
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

        payload = {
            "weight": weight,
            "date": datetime.now(timezone.utc)
            .isoformat(timespec="milliseconds")
            .replace("+00:00", "Z"),
        }

        try:
            response = await create_weight_data(token, payload)
        except Exception as exc:  # noqa: BLE001
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                exc,
            )
            await _send_error(
                message,
                context,
                chat_id,
                user_message_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

        if response.status_code >= 400:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
                user_id,
                response.status_code,
                response.text,
            )
            error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            try:
                payload_json = response.json()
                if isinstance(payload_json, dict):
                    detail = payload_json.get("detail") or payload_json.get("message")
                    if isinstance(detail, str):
                        error_text = f"‚ö†Ô∏è {detail}"
            except ValueError:
                pass
            await _send_error(
                message,
                context,
                chat_id,
                user_message_id,
                error_text,
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

        try:
            saved_payload = response.json()
        except ValueError:
            saved_payload = {}

        saved_weight = saved_payload.get("weight", weight)
        saved_date = saved_payload.get("date") or payload["date"]
        display_date = saved_date
        if saved_date:
            try:
                display_date = (
                    datetime.fromisoformat(saved_date.replace("Z", "+00:00"))
                    .strftime("%d.%m.%Y %H:%M")
                )
            except ValueError:
                display_date = saved_date

        confirmation = (
            f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {saved_weight} –∫–≥"
            if not display_date
            else f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {saved_weight} –∫–≥ (–æ—Ç {display_date})"
        )

        await message.reply_text(
            confirmation,
            reply_markup=get_personal_data_menu(),
        )
        schedule_message_deletion(
            context,
            [user_message_id],
            chat_id,
            delay=5,
        )

        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END

    try:
        logger.info(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s, —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s",
            DB_PATH,
            os.path.exists(DB_PATH),
        )
        async with aiosqlite.connect(DB_PATH) as db:
            await _init_table_if_required(db)
            await _ensure_user_row(db, user_id)
            await db.execute(
                "UPDATE UserSettings SET weight = ? WHERE user_id = ?",
                (weight, user_id),
            )
            await db.commit()
    except aiosqlite.Error as exc:
        logger.error(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
            user_id,
            exc,
        )
        await _send_error(
            message,
            context,
            chat_id,
            user_message_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END

    logger.info("–í–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, weight)
    await message.reply_text(
        f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥",
        reply_markup=get_personal_data_menu(),
    )
    schedule_message_deletion(
        context,
        [user_message_id],
        chat_id,
        delay=5,
    )
    context.user_data["conversation_active"] = False
    context.user_data.pop("current_state", None)
    return ConversationHandler.END