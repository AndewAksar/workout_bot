# bot/handlers/set_height.py
"""
–ú–æ–¥—É–ª—å: set_height.py
–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö ConversationHandler
–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- aiosqlite: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
- telegram: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- telegram.ext: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ ConversationHandler.
- bot.keyboards.personal_data_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
- bot.keyboards.training_settings_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
- bot.keyboards.settings_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
- bot.utils.logger: –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import aiosqlite
from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler
)

from bot.api.gym_stat_client import update_profile
from bot.config.settings import DB_PATH
from bot.keyboards.personal_data_menu import get_personal_data_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.logger import setup_logging
from bot.utils.message_deletion import schedule_message_deletion

logger = setup_logging()

async def set_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ—Ç 0 –¥–æ 300),
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —á–µ—Ä–µ–∑ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        int: ConversationHandler.END, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥.
    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        - ValueError: –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.
        - aiosqlite.Error: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        - telegram.error.TelegramError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ä–æ—Å—Ç, –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.
    """
    message = update.message
    if message is None:
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END

    user_id = message.from_user.id
    chat_id = message.chat_id
    user_message_id = message.message_id
    raw_height = (message.text or "").strip()

    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, raw_height)

    try:
        height = float(raw_height.replace(",", "."))
        if height < 0 or height > 300:
            raise ValueError
    except ValueError:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞: %s", user_id, raw_height)
        error_message = await message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).",
            reply_markup=get_personal_data_menu(),
        )

        schedule_message_deletion(
            context,
            [user_message_id, error_message.message_id],
            chat_id,
            delay = 5,
        )
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END

    mode = await get_user_mode(user_id)
    if mode == "api":
        token = await get_valid_access_token(user_id)
        if not token:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
            error_message = await message.reply_text(
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

        try:
            response = await update_profile(token, {"heightCm": height})
        except Exception as exc:  # noqa: BLE001
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                exc,
            )
            error_message = await message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

        if response.status_code != 200:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
                user_id,
                response.status_code,
                response.text,
            )
            error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            try:
                response_json = response.json()
                if isinstance(response_json, dict):
                    detail = response_json.get("detail") or response_json.get("message")
                    if isinstance(detail, str) and detail:
                        error_text = f"‚ö†Ô∏è {detail}"
            except ValueError:
                pass
            error_message = await message.reply_text(
                error_text,
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END
    else:
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "UPDATE UserSettings SET height = ? WHERE user_id = ?",
                    (height, user_id),
                )
                await db.commit()
        except aiosqlite.Error as exc:
            logger.error(
                "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                exc,
            )
            error_message = await message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data["conversation_active"] = False
            context.user_data.pop("current_state", None)
            return ConversationHandler.END

    confirmation_message = await message.reply_text(
        f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {height:g} —Å–º",
        reply_markup=get_personal_data_menu(),
    )
    schedule_message_deletion(
        context,
        [user_message_id, confirmation_message.message_id],
        chat_id,
        delay=5,
    )
    logger.info(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s",
        user_id,
    )

    context.user_data["conversation_active"] = False
    context.user_data.pop("current_state", None)
    context.user_data.pop("height", None)
    return ConversationHandler.END