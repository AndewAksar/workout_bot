# bot/handlers/set_gender.py
"""
–ú–æ–¥—É–ª—å: set_gender.py
–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö ConversationHandler
–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- aiosqlite: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
- telegram: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- telegram.ext: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ ConversationHandler.
- bot.keyboards.personal_data_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
- bot.keyboards.training_settings_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
- bot.keyboards.settings_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
- bot.utils.logger: –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import os

import aiosqlite
from telegram import Message, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler
)

from bot.api.gym_stat_client import get_profile, update_profile
from bot.config.settings import (
    DB_PATH,
    SET_GENDER
)
from bot.keyboards.personal_data_menu import get_personal_data_menu
from bot.utils.api_session import get_valid_access_token
from bot.utils.db_utils import get_user_mode
from bot.utils.logger import setup_logging
from bot.utils.message_deletion import schedule_message_deletion


logger = setup_logging()


GENDER_MAP = {
    "–º—É–∂—Å–∫–æ–π": "male",
    "–∂–µ–Ω—Å–∫–∏–π": "female",
    "male": "male",
    "female": "female",
}


async def _reply_and_finish(
    message: Message,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    *,
    reply_markup=None,
    delete_user_message: bool = False,
    delete_bot_message: bool = False,
    delay: int = 5,
) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    sent_message = await message.reply_text(text, reply_markup=reply_markup)
    messages_to_delete: list[int] = []
    if delete_user_message:
        messages_to_delete.append(message.message_id)
    if delete_bot_message and sent_message:
        messages_to_delete.append(sent_message.message_id)
    if messages_to_delete:
        schedule_message_deletion(
            context,
            messages_to_delete,
            message.chat_id,
            delay=delay,
        )
    context.user_data["conversation_active"] = False
    context.user_data.pop("current_state", None)
    return ConversationHandler.END


async def set_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        int: ConversationHandler.END, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥.
    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        - sqlite3.Error: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        - aiosqlite.Error: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –ø–æ–ª, –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    """
    logger.info("–§—É–Ω–∫—Ü–∏—è set_gender –≤—ã–∑–≤–∞–Ω–∞")
    message = update.message
    if message is None:
        context.user_data["conversation_active"] = False
        context.user_data.pop("current_state", None)
        return ConversationHandler.END

    user_id = message.from_user.id
    gender = (message.text or "").strip()

    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gender}")

    normalized_gender = gender.lower()
    mapped_gender = GENDER_MAP.get(normalized_gender)
    if not mapped_gender:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {gender}")
        await message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):",
            reply_markup=None
        )
        return SET_GENDER

    mode = await get_user_mode(user_id)
    if mode == "api":
        token = await get_valid_access_token(user_id)
        if not token:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
            return await _reply_and_finish(
                message,
                context,
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        try:
            profile_response = await get_profile(token)
        except Exception as exc:  # noqa: BLE001
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                exc,
            )
            return await _reply_and_finish(
                message,
                context,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        if profile_response.status_code != 200:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
                user_id,
                profile_response.status_code,
                profile_response.text,
            )
            return await _reply_and_finish(
                message,
                context,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        try:
            profile_data = profile_response.json()
        except ValueError:
            logger.error(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                profile_response.text,
            )
            profile_data = {}
        if not isinstance(profile_data, dict):
            logger.error(
                "–û—Ç–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: %s",
                user_id,
                profile_data,
            )
            profile_data = {}

        current_name_raw = (profile_data or {}).get("name")
        current_name = str(current_name_raw).strip() if current_name_raw is not None else ""
        if not current_name:
            return await _reply_and_finish(
                message,
                context,
                "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∏–º—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ò–º—è¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É.",
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        payload = {
            "name": current_name,
            "gender": mapped_gender,
        }

        try:
            response = await update_profile(token, payload)
        except Exception as exc:  # noqa: BLE001
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                user_id,
                exc,
            )
            return await _reply_and_finish(
                message,
                context,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        if response.status_code != 200:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
                user_id,
                response.status_code,
                response.text,
            )
            error_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            try:
                response_json = response.json()
                if isinstance(response_json, dict):
                    detail = response_json.get("detail") or response_json.get("message")
                    if isinstance(detail, str) and detail:
                        error_text = f"‚ö†Ô∏è {detail}"
            except ValueError:
                pass
            return await _reply_and_finish(
                message,
                context,
                error_text,
                reply_markup=get_personal_data_menu(),
                delete_user_message=True,
                delete_bot_message=True,
            )

        logger.info(
            "–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
            user_id,
            mapped_gender,
        )

        return await _reply_and_finish(
            message,
            context,
            "‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
            reply_markup=get_personal_data_menu(),
            delete_user_message=True,
            delay=5,
        )

    try:
        logger.info(
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}, —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DB_PATH)}"
        )
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT name FROM sqlite_master WHERE type='table' AND name='UserSettings'",
            ) as cursor:
                if not await cursor.fetchone():
                    logger.error("–¢–∞–±–ª–∏—Ü–∞ UserSettings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º init_db")
                    from bot.database.db_init import init_db

                    await asyncio.to_thread(init_db)
            async with db.execute(
                "SELECT user_id FROM UserSettings WHERE user_id = ?",
                (user_id,),
            ) as cursor:
                user_exists = await cursor.fetchone()
            if not user_exists:
                await db.execute(
                    "INSERT INTO UserSettings (user_id) VALUES (?)",
                    (user_id,),
                )
                await db.commit()
            await db.execute(
                "UPDATE UserSettings SET gender = ? WHERE user_id = ?",
                (normalized_gender, user_id),
            )
            await db.commit()
            logger.info(f"–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gender}")
    except aiosqlite.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return await _reply_and_finish(
            message,
            context,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_personal_data_menu(),
            delete_user_message=True,
            delete_bot_message=True,
        )
    except Exception as e:  # noqa: BLE001
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return await _reply_and_finish(
            message,
            context,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_personal_data_menu(),
            delete_user_message=True,
            delete_bot_message=True,
        )

    logger.info(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
    )
    return await _reply_and_finish(
        message,
        context,
        "‚úÖ –ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=get_personal_data_menu(),
        delete_user_message=True,
        delay=5,
    )