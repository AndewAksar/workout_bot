# bot/handlers/set_name.py
"""
–ú–æ–¥—É–ª—å: set_name.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ConversationHandler.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- aiosqlite: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
- telegram: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- telegram.ext: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ ConversationHandler.
- bot.keyboards.personal_data_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
- bot.utils.logger: –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫.
- bot.utils.message_deletion: –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
- SET_NAME: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
"""

import aiosqlite
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from bot.api.gym_stat_client import update_profile
from bot.keyboards.personal_data_menu import get_personal_data_menu
from bot.utils.logger import setup_logging
from bot.utils.message_deletion import schedule_message_deletion
from bot.utils.db_utils import get_user_mode
from bot.utils.api_session import get_valid_access_token
from bot.config.settings import (
    DB_PATH,
    SET_NAME
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logging()

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø–∏—Å–∞–Ω–∏–µ:
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        int: ConversationHandler.END, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥.
    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        - aiosqlite.Error: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        - telegram.error.TelegramError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è, –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
        —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("–§—É–Ω–∫—Ü–∏—è set_name –≤—ã–∑–≤–∞–Ω–∞")
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    name = update.message.text.strip()
    user_message_id = update.message.message_id

    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {name}")

    if not name or len(name) > 50:  # –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {name}")
        error_message = await update.message.reply_text(
            "‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            reply_markup=None
        )
        schedule_message_deletion(
            context,
            [user_message_id, error_message.message_id],
            chat_id,
            delay=10
        )
        return SET_NAME

    mode = await get_user_mode(user_id)
    if mode == 'api':
        token = await get_valid_access_token(user_id)
        if not token:
            error_message = await update.message.reply_text(
                "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        try:
            resp = await update_profile(token, {"name": name})
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
            )
            error_message = await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        if resp.status_code != 200:
            logger.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s %s",
                user_id,
                resp.status_code,
                resp.text,
            )
            error_message = await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
    else:
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute(
                        "SELECT user_id FROM UserSettings WHERE user_id = ?",
                        (user_id,),
                ) as cursor:
                    exists = await cursor.fetchone()
                if not exists:
                    await db.execute(
                        "INSERT INTO UserSettings (user_id) VALUES (?)",
                        (user_id,),
                    )
                    await db.commit()
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await db.execute(
                    "UPDATE UserSettings SET name = ? WHERE user_id = ?",
                    (name, user_id),
                )
                await db.commit()
                logger.info(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {name}")
        except aiosqlite.Error as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
            )
            error_message = await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_personal_data_menu(),
            )
            schedule_message_deletion(
                context,
                [user_message_id, error_message.message_id],
                chat_id,
                delay=5,
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
            )
            context.user_data['conversation_active'] = False
            return ConversationHandler.END

    try:
        await update.message.reply_text(
            (
                f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{name}</b>.\n"
                "–û–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö."
                " –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ"
                " –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
            ),
            parse_mode="HTML",
            reply_markup=get_personal_data_menu(),
        )
        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
        )
        schedule_message_deletion(
            context,
            [user_message_id],
            chat_id,
            delay=5,
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
        )
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

    logger.debug(
        f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    )
    context.user_data['conversation_active'] = False
    context.user_data.pop('current_state', None)
    return ConversationHandler.END

