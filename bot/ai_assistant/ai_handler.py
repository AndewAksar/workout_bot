# bot/handlers/ai_handler.py
"""
–ú–æ–¥—É–ª—å: ai_handler.py
–û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –≤ Telegram-–±–æ—Ç–µ.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å AI —á–µ—Ä–µ–∑ ConversationHandler.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- telegram: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
- telegram.ext: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ ConversationHandler.
- bot.utils.logger: –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
- bot.keyboards.main_menu: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
- bot.ai_assistant.ai_api: –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API GigaChat.
- bot.ai_assistant.ai_prompt: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
"""

import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,

)
from telegram.error import TelegramError
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)
from telegram.constants import ParseMode

from bot.utils.logger import setup_logging
from bot.keyboards.main_menu import get_main_menu
from bot.keyboards.ai_assistant_menu import get_model_selection_menu
from bot.ai_assistant.ai_api import (
    generate_gigachat_response,
    get_user_settings
)
from bot.ai_assistant.open_ai_bot import generate_chatgpt_response
from bot.ai_assistant.ai_prompt import get_system_prompt
from bot.utils.message_deletion import schedule_message_deletion
from bot.config.settings import AI_CONSULTATION


logger = setup_logging()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
GIGACHAT_AUTH_TOKEN = None

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
MAX_MESSAGE_LENGTH = 4096

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def choose_ai_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å."""
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=get_model_selection_menu(),
    )
    return ConversationHandler.END

async def start_gigachat_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é GigaChat."""
    context.user_data['ai_model'] = 'gigachat'
    return await start_ai_assistant(update, context)

async def start_chatgpt_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é ChatGPT."""
    context.user_data['ai_model'] = 'chatgpt'
    return await start_ai_assistant(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å AI –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def start_ai_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.")

    context.user_data['conversation_active'] = True
    context.user_data['current_state'] = 'AI_CONSULTATION'
    context.user_data['ai_history'] = []

    model = context.user_data.get('ai_model', 'gigachat')
    model_name = 'ChatGPT' if model == 'chatgpt' else 'GigaChat'

    exit_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='end_ai_consultation')]
    ])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    message_text = (
        f"ü§ñ –í—ã –≤—ã–±—Ä–∞–ª–∏ {model_name}. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –ø–∏—Ç–∞–Ω–∏—é –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    message = await query.message.edit_text(
        text=message_text,
        parse_mode=ParseMode.HTML,
        reply_markup=exit_keyboard
    )
    context.user_data['start_ai_message_id'] = message.message_id
    logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω message_id –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")

    return AI_CONSULTATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å AI.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        int: –°–æ—Å—Ç–æ—è–Ω–∏–µ AI_CONSULTATION –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
    """
    user_message = update.message.text
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ø—Ä–æ—Å–∏–ª AI: {user_message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ AI_CONSULTATION
    if context.user_data.get('current_state') != 'AI_CONSULTATION':
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è handle_ai_message: {context.user_data.get('current_state')}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu(),
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    exit_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='end_ai_consultation')]
        ])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        settings = get_user_settings(user_id)
        user_data_str = ""
        if settings:
            user_data_str = "\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            for key, value in settings.items():
                if value is not None:
                    user_data_str += f"{key.capitalize()}: {value}\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = get_system_prompt() + user_data_str

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['ai_history'].append({"role": "user", "content": user_message})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        messages = [{"role": "system", "content": system_prompt}] + context.user_data['ai_history']

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        model = context.user_data.get('ai_model', 'gigachat')
        if model == 'chatgpt':
            response = generate_chatgpt_response(messages)
            logger.debug(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            response = generate_gigachat_response(messages)
            logger.debug(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç assistant –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['ai_history'].append({"role": "assistant", "content": response})

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É–¥–∞–ª–µ–Ω–∞)
        start_message_id = context.user_data.get('start_ai_message_id')
        if start_message_id and not context.user_data.get('start_keyboard_removed', False):
            try:
                await context.bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=start_message_id,
                    reply_markup=None
                )
                logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {start_message_id}")
                context.user_data['start_keyboard_removed'] = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {start_message_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò
        last_ai_response_id = context.user_data.get('last_ai_response_id')
        if last_ai_response_id:
            try:
                await context.bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=last_ai_response_id,
                    reply_markup=None
                )
                logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò {last_ai_response_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò {last_ai_response_id}: {e}")

        # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram
        if len(response) <= MAX_MESSAGE_LENGTH:
            sent_message = await update.message.reply_text(
                response,
                parse_mode=None,
                reply_markup=exit_keyboard
            )
            context.user_data['last_ai_response_id'] = sent_message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω last_ai_response_id: {sent_message.message_id}")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ MAX_MESSAGE_LENGTH
            messages = []
            start = 0
            while start < len(response):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                end = min(start + MAX_MESSAGE_LENGTH, len(response))
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞
                if end < len(response):
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–µ–∑–∫–∏
                    while end > start and response[end - 1] not in [' ', '\n', '.']:
                        end -= 1
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º MAX_MESSAGE_LENGTH
                    if end == start:
                        end = start + MAX_MESSAGE_LENGTH
                part = response[start:end]
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è
                if part.strip():
                    is_last_part = end >= len(response)
                    sent_message = await update.message.reply_text(
                        part,
                        parse_mode=None,
                        reply_markup=exit_keyboard if is_last_part else None
                    )
                    messages.append(sent_message.message_id)
                start = end
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
                while start < len(response) and response[start] in [' ', '\n']:
                    start += 1
            if messages:
                context.user_data['last_ai_response_id'] = messages[-1]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω last_ai_response_id –¥–ª—è —Ä–∞–∑–±–∏—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {messages[-1]}")

        return AI_CONSULTATION  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ai_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.callback_query.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            parse_mode=ParseMode.HTML
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–∏–∞–ª–æ–≥–∞
        context.user_data['conversation_active'] = False
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–æ callback_data='end_ai_consultation')
async def end_ai_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å AI.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        int: ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.")

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await query.message.edit_reply_markup(reply_markup=None)
        logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {query.message.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {query.message.message_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await query.message.reply_text(
        "ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu(),
        parse_mode=ParseMode.HTML
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['conversation_active'] = False
    if 'ai_history' in context.user_data:
        del context.user_data['ai_history']
    if 'start_ai_message_id' in context.user_data:
        del context.user_data['start_ai_message_id']
    if 'last_ai_response_id' in context.user_data:
        del context.user_data['last_ai_response_id']
    if 'start_keyboard_removed' in context.user_data:
        del context.user_data['start_keyboard_removed']
    if 'ai_model' in context.user_data:
        del context.user_data['ai_model']

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è AI
async def ai_error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞ –≤ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {error}")

    if isinstance(error, TelegramError) and "Message is not modified" in str(error):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified", —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        logger.debug("–û—à–∏–±–∫–∞ 'Message is not modified' –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if update is None:
        logger.error("Update is None in ai_error_handler")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç chat_id
        context.user_data['conversation_active'] = False
        if 'ai_history' in context.user_data:
            del context.user_data['ai_history']
        if 'start_ai_message_id' in context.user_data:
            del context.user_data['start_ai_message_id']
        if 'last_ai_response_id' in context.user_data:
            del context.user_data['last_ai_response_id']
        if 'start_keyboard_removed' in context.user_data:
            del context.user_data['start_keyboard_removed']
        if 'ai_model' in context.user_data:
            del context.user_data['ai_model']
        return

    chat_id = None
    user_id = None

    if update.callback_query:
        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat_id
    elif update.message:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
    else:
        logger.error("Update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ callback_query, –Ω–∏ message")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['conversation_active'] = False
        if 'ai_history' in context.user_data:
            del context.user_data['ai_history']
        if 'start_ai_message_id' in context.user_data:
            del context.user_data['start_ai_message_id']
        if 'last_ai_response_id' in context.user_data:
            del context.user_data['last_ai_response_id']
        if 'start_keyboard_removed' in context.user_data:
            del context.user_data['start_keyboard_removed']
        if 'ai_model' in context.user_data:
            del context.user_data['ai_model']
        return

    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(),
            parse_mode = ParseMode.HTML
        )
        await schedule_message_deletion(context, [message.message_id], chat_id, delay=5)

    except Exception as send_error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç–µ {chat_id}: {send_error}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['conversation_active'] = False
    if 'ai_history' in context.user_data:
        del context.user_data['ai_history']
    if 'start_ai_message_id' in context.user_data:
        del context.user_data['start_ai_message_id']
    if 'last_ai_response_id' in context.user_data:
        del context.user_data['last_ai_response_id']
    if 'start_keyboard_removed' in context.user_data:
        del context.user_data['start_keyboard_removed']
    if 'ai_model' in context.user_data:
        del context.user_data['ai_model']

    return ConversationHandler.END